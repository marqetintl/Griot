{"version":3,"sources":["../../../../../packages/miq-pdfjs/src/index.jsx","../../../../../packages/miq-dmsjs/src/docufile/FileGrid.jsx","../../../../../packages/miq-dmsjs/src/document/ReadOnlyView.jsx","../../../../../packages/miq-dmsjs/src/components.jsx"],"names":["PdfCtx","createContext","PdfViewer","src","children","useState","numPages","setNumPages","pageNumber","setPageNumber","value","useMemo","changePage","offset","prevPageNumber","previousPage","nextPage","Provider","pdfjs","GlobalWorkerOptions","workerSrc","version","Previous","props","useContext","id","className","disabled","onClick","Next","Renderer","getImgUrl","getClassName","file","onLoadSuccess","getIcon","ext","Icon","Icons","getFileIcon","DocuFileGrid","items","map","href","target","name_truncated","size","slug","DocumentReadOnlyView","docSlug","match","params","doc","setDoc","setError","useEffect","docServices","detail","then","data","catch","err","title","actions","users","mapDocumentUser2Avatar","count","users_data","length","reference","formatDate","created","month","day","year","description","files_data","BackToStaffDocumentsLink","to","docUrls","staff_path","ArrowLeft"],"mappings":"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","file":"static/js/5.e3ac9194.chunk.js","sourcesContent":["import { createContext, useContext, useMemo, useState } from \"react\";\n\nimport { Document, Page, pdfjs } from \"react-pdf\";\n\nimport { Button } from \"@miq/components\";\nimport { getClassName, getImgUrl } from \"@miq/utils\";\n\nimport \"./index.scss\";\n\nconst PdfCtx = createContext();\npdfjs.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjs.version}/pdf.worker.js`;\n\nexport default function PdfViewer({ src, children, ...props }) {\n    const [numPages, setNumPages] = useState(null);\n    const [pageNumber, setPageNumber] = useState(1);\n\n    const value = useMemo(() => {\n        function changePage(offset) {\n            setPageNumber((prevPageNumber) => prevPageNumber + offset);\n        }\n\n        function previousPage() {\n            changePage(-1);\n        }\n\n        function nextPage() {\n            changePage(1);\n        }\n\n        return { src, numPages, pageNumber, previousPage, nextPage, setNumPages, setPageNumber };\n    }, [src, numPages, pageNumber]);\n\n    return <PdfCtx.Provider value={value}>{children}</PdfCtx.Provider>;\n}\n\nconst Renderer = (props) => {\n    let { src, pageNumber, setNumPages, setPageNumber } = useContext(PdfCtx);\n\n    if (!src) return null;\n    src = getImgUrl(src);\n\n    function onDocumentLoadSuccess({ numPages }) {\n        setNumPages(numPages);\n        setPageNumber(pageNumber);\n    }\n\n    return (\n        <div id={props.id} className={getClassName([\"miq-pdf\", props.className])}>\n            <Document file={src} onLoadSuccess={onDocumentLoadSuccess}>\n                <Page pageNumber={pageNumber} />\n            </Document>\n        </div>\n    );\n};\n\nconst Previous = (props) => {\n    const { pageNumber, previousPage } = useContext(PdfCtx);\n\n    return (\n        <Button id={props.id} className={props.className} disabled={pageNumber <= 1} onClick={previousPage}>\n            Previous\n        </Button>\n    );\n};\n\nconst Next = (props) => {\n    const { pageNumber, numPages, nextPage } = useContext(PdfCtx);\n\n    return (\n        <Button id={props.id} className={props.className} disabled={pageNumber >= numPages} onClick={nextPage}>\n            Next\n        </Button>\n    );\n};\n\nPdfViewer.Previous = Previous;\nPdfViewer.Next = Next;\nPdfViewer.Renderer = Renderer;\n\n// {numPages &&\n// Array(numPages)\n//     .fill()\n//     .map((_, i) => <Page pageNumber={i + 1} />)}\n","import { Icons, Button, ImgSquare, Img, ConfirmIconButton } from \"@miq/components\";\nimport { getImgUrl } from \"@miq/utils\";\nimport PdfViewer from \"@miq/pdfjs\";\n\nimport \"./docufile-grid.scss\";\n\nconst getIcon = (file) => {\n    switch (file.ext) {\n        case \".jpg\":\n        case \".jpeg\":\n        case \".png\":\n            return <ImgSquare {...file} />;\n\n        default:\n            const Icon = Icons.getFileIcon(file.ext);\n            return <Icon className=\"icon mb-1\" />;\n    }\n};\n\nexport default function DocuFileGrid({ items = [], ...props }) {\n    const renderPreview = ({ file, isImg }) => {\n        return (\n            <div className=\"miq-container\" style={{ minHeight: 500 }}>\n                {isImg && <Img {...file} />}\n                {file.ext === \".pdf\" && <PdfViewer.Renderer />}\n            </div>\n        );\n    };\n\n    const renderPreviewHeader = ({ setOpen, file }) => (\n        <div className=\"flex-1 d-flex justify-content-between\">\n            <div className=\"\" style={{ overflowX: \"scroll\" }}>\n                {file.name_truncated}\n            </div>\n\n            <div className=\"flex-1\">\n                <Button className=\"me-1\">Delete</Button>\n                <Button onClick={() => setOpen(false)}>Close</Button>\n            </div>\n        </div>\n    );\n\n    const renderPreviewFooter = ({ file }) => {\n        if (file.ext !== \".pdf\") return null;\n\n        return (\n            <div className=\"flex-1 miq-container d-flex align-items-center justify-content-between\">\n                <div>\n                    <PdfViewer.Previous />\n                </div>\n                <div>\n                    <PdfViewer.Next />\n                </div>\n            </div>\n        );\n    };\n    return (\n        <div className=\"docufile-grid d-grid grid-2 grid-sm-3 grid-md-4 grid-xl-5\">\n            {items.map((file) => {\n                // const isImg = file.ext === \".jpg\" || file.ext === \".jpeg\" || file.ext === \".png\";\n\n                return (\n                    // <PdfViewer src={file.src} >\n                    //     <ConfirmIconButton\n                    //         fullscreen\n                    //         title={file.name}\n                    //         renderHeader={(args) => renderPreviewHeader({ ...args, file })}\n                    //         render={(args) => renderPreview({ ...args, file, isImg })}\n                    //         renderFooter={(args) => renderPreviewFooter({ ...args, file })}\n                    //     >\n\n                    <a href={getImgUrl(file.src)} className=\"docufile-btn\" target=\"_blank\" key={file.slug}>\n                        {getIcon(file)}\n\n                        <div className=\"text-center\">\n                            <span className=\"label d-block\">{file.name_truncated}</span>\n                            <span className=\"size d-block\">{file.size}</span>\n                        </div>\n                    </a>\n                    //     </ConfirmIconButton>\n                    // </PdfViewer>\n                );\n            })}\n        </div>\n    );\n}\n","import React, { useEffect, useState } from 'react';\n\nimport { AdminView } from '@miq/adminjs';\nimport { AvatarGroup } from '@miq/components';\nimport { formatDate } from '@miq/utils';\n\nimport DocuFileGrid from '../docufile/FileGrid';\nimport { docServices, mapDocumentUser2Avatar } from './utils';\nimport { BackToStaffDocumentsLink } from '../components';\n\nimport './readonly-view.scss';\n\nexport default function DocumentReadOnlyView(props) {\n  const { docSlug } = props.match.params;\n\n  const [doc, setDoc] = useState(null);\n  const [, setError] = useState(null);\n\n  useEffect(() => {\n    docServices\n      .detail(docSlug)\n      .then((data) => {\n        setDoc(data);\n      })\n      .catch((err) => setError('Error'));\n  }, []);\n\n  if (!doc) return null;\n\n  return (\n    <AdminView\n      id=\"DocumentReadOnlyView\"\n      className=\"document-readonly-view\"\n      title={<BackToStaffDocumentsLink />}\n      actions={<AvatarGroup users={mapDocumentUser2Avatar(doc)} count={doc.users_data.length} />}\n    >\n      <div className=\"miq-container-fluid\">\n        <div className=\"text-md\">{doc.title}</div>\n\n        <div className=\"d-flex justify-content-between mb-2\">\n          <div>\n            <span className=\"fw-bold me-1\">Reference:</span>\n            <span className=\"reference\">{doc.reference}</span>\n          </div>\n\n          <div className=\"dt-created text-muted fs-sm\">\n            {formatDate(doc.created, { month: 'long', day: 'numeric', year: 'numeric' }, 'fr')}\n          </div>\n        </div>\n\n        <div className=\"description mb-4\">{doc.description}</div>\n\n        {/*  */}\n        <DocuFileGrid items={doc.files_data} />\n      </div>\n    </AdminView>\n  );\n}\n\nconst UserAvatar = ({ user }) => {\n  if (!user) return null;\n  return <div className=\"miq-user-avatar\">{user.initials}</div>;\n};\n","import React from 'react';\n\nimport { AdminNavLink } from '@miq/adminjs';\nimport { Icons } from '@miq/components';\n\nimport { docUrls } from './document/utils';\n\nexport const BackToStaffDocumentsLink = (props) => {\n  return (\n    <AdminNavLink\n      to={props.to || docUrls.staff_path}\n      Icon={Icons.ArrowLeft}\n      title=\"Retourner aux documents\"\n      className={props.className}\n    />\n  );\n};\n"],"sourceRoot":""}