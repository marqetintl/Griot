{"version":3,"sources":["../../../../../packages/miq-pdfjs/src/index.jsx","../../../../../packages/miq-dmsjs/src/docufile/FileGrid.jsx","../../../../../packages/miq-dmsjs/src/document/ReadOnlyView.jsx","../../../../../packages/miq-dmsjs/src/document/utils.jsx"],"names":["PdfCtx","createContext","PdfViewer","src","children","useState","numPages","setNumPages","pageNumber","setPageNumber","value","useMemo","changePage","offset","prevPageNumber","previousPage","nextPage","Provider","pdfjs","GlobalWorkerOptions","workerSrc","version","Previous","props","useContext","id","className","disabled","onClick","Next","Renderer","getImgUrl","getClassName","file","onLoadSuccess","getIcon","ext","Icon","Icons","getFileIcon","DocuFileGrid","items","map","href","target","name_truncated","size","slug","DocumentReadOnlyView","docSlug","match","params","doc","setDoc","setError","useEffect","docServices","get","then","data","catch","err","title","actions","users_data","user","style","fontWeight","reference","formatDate","created","month","day","year","description","files_data","UserAvatar","initials","formatDocDate","date","getDocumentLinkTo","document","path","link","is_read_only","list","getService","API","this","listPage","url","post","values","services","patch","oldValues","archive","delete","patchFile","Object","keys","includes","Promise","reject","patchUserPermission","user_slug","permission","getStaffList","q","patchUser"],"mappings":"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","file":"static/js/5.5cbfbe4a.chunk.js","sourcesContent":["import { createContext, useContext, useMemo, useState } from \"react\";\n\nimport { Document, Page, pdfjs } from \"react-pdf\";\n\nimport { Button } from \"@miq/components\";\nimport { getClassName, getImgUrl } from \"@miq/utils\";\n\nimport \"./index.scss\";\n\nconst PdfCtx = createContext();\npdfjs.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjs.version}/pdf.worker.js`;\n\nexport default function PdfViewer({ src, children, ...props }) {\n    const [numPages, setNumPages] = useState(null);\n    const [pageNumber, setPageNumber] = useState(1);\n\n    const value = useMemo(() => {\n        function changePage(offset) {\n            setPageNumber((prevPageNumber) => prevPageNumber + offset);\n        }\n\n        function previousPage() {\n            changePage(-1);\n        }\n\n        function nextPage() {\n            changePage(1);\n        }\n\n        return { src, numPages, pageNumber, previousPage, nextPage, setNumPages, setPageNumber };\n    }, [src, numPages, pageNumber]);\n\n    return <PdfCtx.Provider value={value}>{children}</PdfCtx.Provider>;\n}\n\nconst Renderer = (props) => {\n    let { src, pageNumber, setNumPages, setPageNumber } = useContext(PdfCtx);\n\n    if (!src) return null;\n    src = getImgUrl(src);\n\n    function onDocumentLoadSuccess({ numPages }) {\n        setNumPages(numPages);\n        setPageNumber(pageNumber);\n    }\n\n    return (\n        <div id={props.id} className={getClassName([\"miq-pdf\", props.className])}>\n            <Document file={src} onLoadSuccess={onDocumentLoadSuccess}>\n                <Page pageNumber={pageNumber} />\n            </Document>\n        </div>\n    );\n};\n\nconst Previous = (props) => {\n    const { pageNumber, previousPage } = useContext(PdfCtx);\n\n    return (\n        <Button id={props.id} className={props.className} disabled={pageNumber <= 1} onClick={previousPage}>\n            Previous\n        </Button>\n    );\n};\n\nconst Next = (props) => {\n    const { pageNumber, numPages, nextPage } = useContext(PdfCtx);\n\n    return (\n        <Button id={props.id} className={props.className} disabled={pageNumber >= numPages} onClick={nextPage}>\n            Next\n        </Button>\n    );\n};\n\nPdfViewer.Previous = Previous;\nPdfViewer.Next = Next;\nPdfViewer.Renderer = Renderer;\n\n// {numPages &&\n// Array(numPages)\n//     .fill()\n//     .map((_, i) => <Page pageNumber={i + 1} />)}\n","import { Icons, Button, ImgSquare, Img, ConfirmIconButton } from \"@miq/components\";\nimport { getImgUrl } from \"@miq/utils\";\nimport PdfViewer from \"@miq/pdfjs\";\n\nimport \"./docufile-grid.scss\";\n\nconst getIcon = (file) => {\n    switch (file.ext) {\n        case \".jpg\":\n        case \".jpeg\":\n        case \".png\":\n            return <ImgSquare {...file} />;\n\n        default:\n            const Icon = Icons.getFileIcon(file.ext);\n            return <Icon className=\"icon mb-1\" />;\n    }\n};\n\nexport default function DocuFileGrid({ items = [], ...props }) {\n    const renderPreview = ({ file, isImg }) => {\n        return (\n            <div className=\"miq-container\" style={{ minHeight: 500 }}>\n                {isImg && <Img {...file} />}\n                {file.ext === \".pdf\" && <PdfViewer.Renderer />}\n            </div>\n        );\n    };\n\n    const renderPreviewHeader = ({ setOpen, file }) => (\n        <div className=\"flex-1 d-flex justify-content-between\">\n            <div className=\"\" style={{ overflowX: \"scroll\" }}>\n                {file.name_truncated}\n            </div>\n\n            <div className=\"flex-1\">\n                <Button className=\"me-1\">Delete</Button>\n                <Button onClick={() => setOpen(false)}>Close</Button>\n            </div>\n        </div>\n    );\n\n    const renderPreviewFooter = ({ file }) => {\n        if (file.ext !== \".pdf\") return null;\n\n        return (\n            <div className=\"flex-1 miq-container d-flex align-items-center justify-content-between\">\n                <div>\n                    <PdfViewer.Previous />\n                </div>\n                <div>\n                    <PdfViewer.Next />\n                </div>\n            </div>\n        );\n    };\n    return (\n        <div className=\"docufile-grid d-grid grid-2 grid-sm-3 grid-md-4 grid-xl-5\">\n            {items.map((file) => {\n                // const isImg = file.ext === \".jpg\" || file.ext === \".jpeg\" || file.ext === \".png\";\n\n                return (\n                    // <PdfViewer src={file.src} >\n                    //     <ConfirmIconButton\n                    //         fullscreen\n                    //         title={file.name}\n                    //         renderHeader={(args) => renderPreviewHeader({ ...args, file })}\n                    //         render={(args) => renderPreview({ ...args, file, isImg })}\n                    //         renderFooter={(args) => renderPreviewFooter({ ...args, file })}\n                    //     >\n\n                    <a href={getImgUrl(file.src)} className=\"docufile-btn\" target=\"_blank\" key={file.slug}>\n                        {getIcon(file)}\n\n                        <div className=\"text-center\">\n                            <span className=\"label d-block\">{file.name_truncated}</span>\n                            <span className=\"size d-block\">{file.size}</span>\n                        </div>\n                    </a>\n                    //     </ConfirmIconButton>\n                    // </PdfViewer>\n                );\n            })}\n        </div>\n    );\n}\n","import { AdminView } from \"@miq/adminjs\";\nimport { useEffect, useState } from \"react\";\n\nimport { formatDate } from \"@miq/utils\";\n\nimport DocuFileGrid from \"../docufile/FileGrid\";\nimport { docServices } from \"./utils\";\n\nimport \"./readonly-view.scss\";\n\nexport default function DocumentReadOnlyView(props) {\n    const { docSlug } = props.match.params;\n\n    const [doc, setDoc] = useState(null);\n    const [error, setError] = useState(null);\n\n    useEffect(() => {\n        docServices\n            .get(docSlug)\n            .then((data) => {\n                setDoc(data);\n            })\n            .catch((err) => setError(\"Error\"));\n    }, []);\n\n    if (!doc) return null;\n\n    return (\n        <AdminView\n            id=\"DocumentReadOnlyView\"\n            className=\"document-readonly-view\"\n            title={doc.title}\n            actions={\n                <>\n                    <div className=\"miq-user-avatar-group\">\n                        <div className=\"miq-user-avatar count\">+6</div>\n\n                        {doc.users_data.map((user) => (\n                            <UserAvatar user={user} key={user.slug} />\n                        ))}\n                    </div>\n                </>\n            }\n        >\n            <div className=\"miq-container-fluid\">\n                <div className=\"d-flex justify-content-between mb-2\">\n                    <div className=\"reference\">\n                        Reference <span style={{ fontWeight: \"600\" }}>{doc.reference}</span>\n                    </div>\n\n                    <div className=\"dt-created text-muted fs-sm\">\n                        {formatDate(doc.created, { month: \"long\", day: \"numeric\", year: \"numeric\" }, \"fr\")}\n                    </div>\n                </div>\n\n                <div className=\"description mb-4\">{doc.description}</div>\n\n                {/*  */}\n                <DocuFileGrid items={doc.files_data} />\n            </div>\n        </AdminView>\n    );\n}\n\nconst UserAvatar = ({ user, ...props }) => {\n    if (!user) return null;\n    return <div className=\"miq-user-avatar\">{user.initials}</div>;\n};\n","import { API, services } from \"@miq/adminjs\";\nimport { getService } from \"@miq/utils\";\nimport { addOrUpdateArrayObject } from \"@miq/utils\";\nimport { formatDate } from \"@miq/utils\";\n\nexport const formatDocDate = (date) => formatDate(date, { month: \"numeric\", day: \"numeric\", year: \"numeric\" });\n\nexport const getDocumentLinkTo = (document, path) => {\n    const link = `${path}${document.slug}/`;\n    if (document.is_read_only) {\n        return `${link}view/`;\n    }\n    return link;\n};\n\nexport const docServices = {\n    path: \"documents/\",\n\n    /**\n     * DOCUMENT\n     */\n\n    list(params) {\n        return getService(API, this.path, params);\n    },\n    listPage(url) {\n        return getService(API, url);\n    },\n    get(docSlug, params) {\n        return getService(API, `${this.path}${docSlug}/`, params);\n    },\n    post(values) {\n        return services.post(`${this.path}`, values);\n    },\n    patch(docSlug, values, oldValues) {\n        return services.patch(`${this.path}${docSlug}/`, values, oldValues);\n    },\n    archive(docSlug) {\n        return services.get(`${this.path}${docSlug}/archive/`);\n    },\n    delete(docSlug) {\n        return services.delete(`${this.path}${docSlug}/`);\n    },\n\n    /**\n     * Add a docufile to a document\n     * @param {*} docSlug\n     * @param {*} values\n     * @returns\n     */\n\n    patchFile(docSlug, values) {\n        if (!Object.keys(values).includes(\"action\")) {\n            return Promise.reject(\"Action required\");\n        }\n\n        return services.post(`${this.path}${docSlug}/files/`, values);\n    },\n\n    /**\n     * USER\n     */\n\n    patchUserPermission(docSlug, user_slug, permission) {\n        return services.post(`${this.path}${docSlug}/permission/`, { user_slug, permission });\n    },\n\n    getStaffList(q) {\n        return services.get(\"search-staff/\", { q });\n    },\n\n    patchUser(docSlug, values) {\n        if (!Object.keys(values).includes(\"action\")) {\n            return Promise.reject(\"Action required\");\n        }\n\n        return services.post(`${this.path}${docSlug}/users/`, values);\n    },\n};\n\nexport const docsReducer = (state = { results: [] }, action) => {\n    const { type, payload = {} } = action;\n    let results;\n\n    switch (type) {\n        case \"SET_DOCS\":\n            return { ...payload };\n\n        case \"APPEND_DOC\":\n            results = addOrUpdateArrayObject(state.results, payload, \"slug\", true);\n            return { ...state, results };\n\n        case \"ADD_UPDATE_DOC\":\n        case \"PREPEND_DOC\":\n            results = addOrUpdateArrayObject(state.results, payload);\n            return { ...state, results };\n\n        case \"REMOVE_DOC\":\n            results = state.results.filter(({ slug }) => slug !== payload.slug);\n            return { ...state, results };\n\n        default:\n            return { ...state };\n    }\n};\n"],"sourceRoot":""}