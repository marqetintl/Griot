{"version":3,"sources":["../../../../../packages/miq-dms/src/DocumentReadOnlyView.jsx","../../../../../packages/miq-dms/src/utils.jsx"],"names":["DocumentReadOnlyView","props","docSlug","match","params","useState","doc","setDoc","setError","useEffect","docServices","get","then","data","catch","err","id","title","className","path","list","getService","API","this","patch","values","oldValues","services","delete","postFile","file","isRequired","name","length","Promise","reject","fd","FormData","append","post","headers","getStaffList","q","patchUser","Object","keys","includes","patchFile"],"mappings":"4NAOe,SAASA,EAAqBC,GACzC,IAAQC,EAAYD,EAAME,MAAMC,OAAxBF,QAER,EAAsBG,mBAAS,MAA/B,mBAAOC,EAAP,KAAYC,EAAZ,KACA,EAA0BF,mBAAS,MAAnC,mBAAcG,GAAd,WAWA,OATAC,qBAAU,WACNC,IACKC,IAAIT,GACJU,MAAK,SAACC,GACHN,EAAOM,MAEVC,OAAM,SAACC,GAAD,OAASP,EAAS,cAC9B,IAEEF,EAGD,cAAC,IAAD,CAAWU,GAAG,uBAAuBC,MAAOX,EAAIW,MAAhD,SACI,qBAAKC,UAAU,OAJN,O,gCCtBrB,oDAGaR,EAAc,CACvBS,KAAM,aAENC,KAHuB,SAGlBhB,GACD,OAAOiB,YAAWC,IAAKC,KAAKJ,KAAMf,IAEtCO,IANuB,SAMnBT,EAASE,GACT,OAAOiB,YAAWC,IAAD,UAASC,KAAKJ,MAAd,OAAqBjB,EAArB,KAAiCE,IAEtDoB,MATuB,SASjBtB,EAASuB,EAAQC,GACnB,OAAOC,IAASH,MAAT,UAAkBD,KAAKJ,MAAvB,OAA8BjB,EAA9B,KAA0CuB,EAAQC,IAE7DE,OAZuB,SAYhB1B,GACH,OAAOyB,IAASC,OAAT,UAAmBL,KAAKJ,MAAxB,OAA+BjB,EAA/B,OAEX2B,SAfuB,WAec,IAA5BC,EAA2B,uDAApBC,WAAW,QACnBC,EAAOF,EAAKE,KAChB,GAAIA,EAAKC,QAAU,IACf,OAAOC,QAAQC,OAAO,yBAG1B,IAAMC,EAAK,IAAIC,SAGf,OAFAD,EAAGE,OAAO,MAAOR,EAAME,GAEhBL,IAASY,KAAT,aAA4BH,EAAI,CACnCI,QAAS,CAAE,eAAgB,0BAGnCC,aA5BuB,SA4BVC,GACT,OAAOf,IAAShB,IAAI,gBAAiB,CAAE+B,OAE3CC,UA/BuB,SA+BbzC,EAASuB,GACf,OAAKmB,OAAOC,KAAKpB,GAAQqB,SAAS,UAI3BnB,IAASY,KAAT,UAAiBhB,KAAKJ,MAAtB,OAA6BjB,EAA7B,WAA+CuB,GAH3CS,QAAQC,OAAO,oBAK9BY,UAtCuB,SAsCb7C,EAASuB,GACf,OAAKmB,OAAOC,KAAKpB,GAAQqB,SAAS,UAI3BnB,IAASY,KAAT,UAAiBhB,KAAKJ,MAAtB,OAA6BjB,EAA7B,WAA+CuB,GAH3CS,QAAQC,OAAO","file":"static/js/10.51fe084e.chunk.js","sourcesContent":["import { Link } from \"react-router-dom\";\nimport { formatDate } from \"@miq/utils\";\nimport { AdminView } from \"@miq/admin\";\nimport { Table } from \"@miq/components\";\nimport { useEffect, useState } from \"react\";\nimport { docServices } from \"./utils\";\n\nexport default function DocumentReadOnlyView(props) {\n    const { docSlug } = props.match.params;\n\n    const [doc, setDoc] = useState(null);\n    const [error, setError] = useState(null);\n\n    useEffect(() => {\n        docServices\n            .get(docSlug)\n            .then((data) => {\n                setDoc(data);\n            })\n            .catch((err) => setError(\"Error\"));\n    }, []);\n\n    if (!doc) return null;\n\n    return (\n        <AdminView id=\"DocumentReadOnlyView\" title={doc.title}>\n            <div className=\"\"></div>\n        </AdminView>\n    );\n}\n","import { API, services } from \"@miq/admin\";\nimport { getService } from \"@miq/utils\";\n\nexport const docServices = {\n    path: \"documents/\",\n\n    list(params) {\n        return getService(API, this.path, params);\n    },\n    get(docSlug, params) {\n        return getService(API, `${this.path}${docSlug}/`, params);\n    },\n    patch(docSlug, values, oldValues) {\n        return services.patch(`${this.path}${docSlug}/`, values, oldValues);\n    },\n    delete(docSlug) {\n        return services.delete(`${this.path}${docSlug}/`);\n    },\n    postFile(file = isRequired(\"file\")) {\n        let name = file.name;\n        if (name.length >= 100) {\n            return Promise.reject(\"File name is too long\");\n        }\n\n        const fd = new FormData();\n        fd.append(\"src\", file, name);\n\n        return services.post(`docufiles/`, fd, {\n            headers: { \"content-type\": \"multipart/form-data\" },\n        });\n    },\n    getStaffList(q) {\n        return services.get(\"search-staff/\", { q });\n    },\n    patchUser(docSlug, values) {\n        if (!Object.keys(values).includes(\"action\")) {\n            return Promise.reject(\"Action required\");\n        }\n\n        return services.post(`${this.path}${docSlug}/users/`, values);\n    },\n    patchFile(docSlug, values) {\n        if (!Object.keys(values).includes(\"action\")) {\n            return Promise.reject(\"Action required\");\n        }\n\n        return services.post(`${this.path}${docSlug}/files/`, values);\n    },\n};\n"],"sourceRoot":""}