{"version":3,"sources":["../../../../../packages/miq-dms/src/DocumentTableView.jsx","../../../../../packages/miq-dms/src/utils.jsx"],"names":["DocumentTable","data","props","status","className","headers","results","map","item","link","match","path","slug","to","title","reference","uploaded_by","name","formatDate","created","month","day","year","DocumentTableView","useState","setStatus","setData","useEffect","docServices","list","then","catch","err","q","URLSearchParams","location","search","get","id","type","value","params","getService","API","this","docSlug","patch","values","oldValues","services","delete","postFile","file","isRequired","length","Promise","reject","fd","FormData","append","post","getStaffList","patchUser","Object","keys","includes","patchFile"],"mappings":"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","file":"static/js/11.14eef8f9.chunk.js","sourcesContent":["import { Link } from \"react-router-dom\";\nimport { formatDate } from \"@miq/utils\";\nimport { AdminView } from \"@miq/admin\";\nimport { Table } from \"@miq/components\";\nimport { useEffect, useState } from \"react\";\nimport { docServices } from \"./utils\";\n\nconst DocumentTable = ({ data = {}, ...props }) => {\n    switch (props.status) {\n        case \"loading\":\n            return <div className=\"\">Loading ...</div>;\n\n        case \"done\":\n            return (\n                <Table headers={[\"\", \"Title\", \"Reference\", \"Created by\", \"Created\"]}>\n                    {data.results.map((item) => {\n                        let link = `${props.match.path}${item.slug}/`;\n                        if (item.status === \"ARCHIVED\") link = `${link}view/`;\n\n                        return (\n                            <tr key={item.slug}>\n                                <td />\n                                <td>\n                                    <Link to={link}>\n                                        <div className=\"\">{item.title}</div>\n                                    </Link>\n                                </td>\n                                <td>{item.reference}</td>\n                                <td>{item.uploaded_by.name}</td>\n                                <td>\n                                    {formatDate(item.created, { month: \"long\", day: \"numeric\", year: \"numeric\" }, \"fr\")}\n                                </td>\n                            </tr>\n                        );\n                    })}\n                </Table>\n            );\n\n        case \"error\":\n        default:\n            return null;\n    }\n};\n\nexport default function DocumentTableView(props) {\n    const [status, setStatus] = useState(\"loading\");\n    const [data, setData] = useState({ results: [] });\n\n    useEffect(() => {\n        docServices\n            .list()\n            .then((data) => {\n                if (!data) {\n                    setStatus(\"empty\");\n                    return;\n                }\n\n                setData(data);\n                setStatus(\"done\");\n            })\n            .catch((err) => {\n                setStatus(\"error\");\n            });\n    }, []);\n\n    const query = new URLSearchParams(props.location.search);\n    const q = query.get(\"q\") || \"\";\n\n    return (\n        <AdminView id=\"DocumentRoutes\" title=\"Documents\">\n            <div className=\"\">\n                <div className=\"\">\n                    <input type=\"text\" name=\"q\" value={q || \"\"} className=\"miq-input\" />\n                </div>\n                Search | Filter: All/Me/To me |\n            </div>\n\n            <DocumentTable {...props} {...{ data, status }} />\n        </AdminView>\n    );\n}\n","import { API, services } from \"@miq/admin\";\nimport { getService } from \"@miq/utils\";\n\nexport const docServices = {\n    path: \"documents/\",\n\n    list(params) {\n        return getService(API, this.path, params);\n    },\n    get(docSlug, params) {\n        return getService(API, `${this.path}${docSlug}/`, params);\n    },\n    patch(docSlug, values, oldValues) {\n        return services.patch(`${this.path}${docSlug}/`, values, oldValues);\n    },\n    delete(docSlug) {\n        return services.delete(`${this.path}${docSlug}/`);\n    },\n    postFile(file = isRequired(\"file\")) {\n        let name = file.name;\n        if (name.length >= 100) {\n            return Promise.reject(\"File name is too long\");\n        }\n\n        const fd = new FormData();\n        fd.append(\"src\", file, name);\n\n        return services.post(`docufiles/`, fd, {\n            headers: { \"content-type\": \"multipart/form-data\" },\n        });\n    },\n    getStaffList(q) {\n        return services.get(\"search-staff/\", { q });\n    },\n    patchUser(docSlug, values) {\n        if (!Object.keys(values).includes(\"action\")) {\n            return Promise.reject(\"Action required\");\n        }\n\n        return services.post(`${this.path}${docSlug}/users/`, values);\n    },\n    patchFile(docSlug, values) {\n        if (!Object.keys(values).includes(\"action\")) {\n            return Promise.reject(\"Action required\");\n        }\n\n        return services.post(`${this.path}${docSlug}/files/`, values);\n    },\n};\n"],"sourceRoot":""}