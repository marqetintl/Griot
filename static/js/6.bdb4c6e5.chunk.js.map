{"version":3,"sources":["../../../../../packages/miq-shared/src/editor/src/Section/section-renderers.jsx","../../../../../packages/miq-shared/src/editor/src/Section/MarkdownSection/index.jsx","../../../../../packages/miq-shared/src/form/FormCtx.jsx","../../../../../packages/miq-shared/src/form/TextInput.jsx","../../../../../packages/miq-shared/src/form/Label.jsx","../../../../../packages/miq-shared/src/form/CheckboxInput.jsx","../../../../../packages/miq-shared/src/form/useForm.jsx","../../../../../packages/miq-shared/src/form/index.jsx"],"names":["marked","setOptions","renderer","Renderer","highlight","code","lang","hljs","require","language","getLanguage","value","pedantic","gfm","breaks","sanitize","smartLists","smartypants","xhtml","render","data","type","isRequired","text","MdSectionEdit","props","className","TextAreaX","autoFocus","clearFocus","name","placeholder","MdSectionPreview","context","isEdit","dangerouslySetInnerHTML","__html","html","MarkdownSection","forwardRef","ref","form","useForm","update","id","getClassName","Icon","Icons","Markdown","label","onSave","slug","values","then","res","setEdit","IS_DEV","displayName","FormCtx","createContext","FormProvider","Provider","withInput","Component","args","ctx","useContext","checked","Object","keys","includes","rest","debounceOnSave","useRef","debounce","e","required","target","isFunction","onChange","func","handleChange","current","TextInput","propTypes","PropTypes","string","bool","disabled","TextArea","TextareaX","Label","children","shared","htmlFor","CheckboxInput","toggleCheck","defaultValues","useState","setValues","errors","setErrors","setValue","key","Form"],"mappings":"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","file":"static/js/6.bdb4c6e5.chunk.js","sourcesContent":["import marked from \"marked\";\nimport ReactDOMServer from \"react-dom/server\";\n\nimport { isRequired } from \"@miq/utils\";\n\nmarked.setOptions({\n    renderer: new marked.Renderer(),\n    highlight: function (code, lang) {\n        const hljs = require(\"highlight.js\");\n        const language = hljs.getLanguage(lang) ? lang : \"plaintext\";\n\n        return hljs.highlight(code, { language }).value;\n    },\n    pedantic: false,\n    gfm: true,\n    breaks: false,\n    sanitize: false,\n    smartLists: true,\n    smartypants: false,\n    xhtml: false,\n});\n\nexport const componentToHtml = (Component) => ReactDOMServer.renderToStaticMarkup(Component);\n\nexport default function render(data) {\n    const { type = isRequired(\"section type\") } = data;\n\n    switch (type) {\n        case \"MD\":\n            return marked(data.text);\n\n        default:\n            return `<div>${data.text}</div>`;\n    }\n}\n\n/**\n * UI\n */\n","import { getClassName, IS_DEV } from \"@miq/utils\";\nimport { forwardRef } from \"react\";\n\nimport \"highlight.js/styles/atelier-cave-dark.css\";\nimport \"./md-section.scss\";\n\nimport { Icons } from \"@miq/components\";\nimport Form, { FormProvider, useForm } from \"@miq/form\";\nimport { SectionFooter, SectionHeader, SectionBody } from \"../section-ui\";\nimport { SectionDeleteButton, SectionEditButton } from \"../section-components\";\nimport render from \"../section-renderers\";\n\n/**\n * MARKDOWN SECTION\n */\n\nconst MdSectionEdit = (props) => {\n    return (\n        <div className=\"\">\n            <Form.TextAreaX autoFocus clearFocus name=\"text\" placeholder=\"# Mardown is supported ...\" />\n        </div>\n    );\n};\n\nconst MdSectionPreview = (props) => {\n    if (props.context.isEdit) return <MdSectionEdit {...props} />;\n\n    return (\n        <div className=\"\">\n            <div dangerouslySetInnerHTML={{ __html: props.data.html || \"Nothing to preview\" }} />\n        </div>\n    );\n};\n\nconst MarkdownSection = forwardRef((props, ref) => {\n    const form = useForm({ text: props.data.text || \"\" });\n    const { data } = props;\n    const update = props.context.update;\n\n    const handleSave = () => {\n        if (!data) return;\n\n        const { type } = data;\n\n        update(\n            props.data.slug,\n            { type, text: form.values.text, html: render({ ...form.values, type }) },\n            { type, text: data.text }\n        ).then((res) => {\n            props.context.setEdit(false);\n        });\n    };\n\n    return (\n        <FormProvider value={form}>\n            <div id={props.id} {...{ ref }} className={getClassName([props.className, \"section-md\"])}>\n                <SectionHeader Icon={Icons.Markdown} />\n\n                <SectionBody>\n                    <MdSectionPreview {...props} />\n                </SectionBody>\n\n                <SectionFooter>\n                    <div className=\"actions\">\n                        <SectionDeleteButton {...props} label=\"Delete\" />\n\n                        <div className=\"actions-primary\">\n                            <SectionEditButton\n                                context={props.context}\n                                form={form}\n                                data={props.data}\n                                onSave={handleSave}\n                            />\n                        </div>\n                    </div>\n                </SectionFooter>\n            </div>\n        </FormProvider>\n    );\n});\n\nif (IS_DEV) {\n    MarkdownSection.displayName = \"MarkdownSection\";\n}\n\nexport default MarkdownSection;\n","import { createContext } from \"react\";\n\nconst FormCtx = createContext(null);\n\nexport const FormProvider = FormCtx.Provider;\n\nexport default FormCtx;\n","import React, { forwardRef, useContext, useRef } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { debounce, isFunction } from \"lodash\";\n\nimport TextareaX from \"../components/inputs/TextareaX\";\nimport { getClassName, isRequired, IS_DEV } from \"@miq/utils\";\nimport FormCtx from \"./FormCtx\";\n\nconst withInput = (Component, args = {}) => {\n    return forwardRef((props, ref) => {\n        props = { ...args, ...props };\n        const ctx = useContext(FormCtx) || isRequired(\"FormCtx\");\n        const { name = isRequired(\"name prop\") } = props;\n        let { value, checked } = props;\n\n        if (Object.keys(ctx.values).includes(name)) {\n            if (props.type === \"checkbox\") checked = ctx.values[name];\n            else value = ctx.values[name];\n        }\n\n        const { onSave, ...rest } = props;\n        const debounceOnSave = useRef(\n            debounce((e) => {\n                if (props.required && !e.target.value) return;\n                if (!onSave || !isFunction(onSave)) return;\n                return onSave({ name: e.target.name, value: e.target.value, e });\n            }, 500)\n        );\n\n        const onChange = (e) => {\n            const func = props.onChange || ctx.handleChange;\n            if (!func) return;\n\n            func(e);\n            if (!debounceOnSave.current) return;\n            debounceOnSave.current(e);\n        };\n\n        return (\n            <Component\n                {...rest}\n                className={getClassName([args.className, props.className])}\n                {...{ value, checked, onChange }}\n                ref={ref}\n            />\n        );\n    });\n};\n\nexport const TextInput = withInput(\"input\", { className: \"miq-input\" });\nTextInput.propTypes = {\n    type: PropTypes.string,\n    id: PropTypes.string,\n    className: PropTypes.string,\n    value: PropTypes.string,\n    required: PropTypes.bool,\n    disabled: PropTypes.bool,\n};\n\nexport const TextArea = withInput(\"textarea\", { className: \"miq-textarea\" });\nexport const TextAreaX = withInput(TextareaX);\n\nif (IS_DEV) {\n    TextInput.displayName = \"TextInput\";\n    TextArea.displayName = \"TextArea\";\n    TextAreaX.displayName = \"TextAreaX\";\n}\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport { getClassName } from \"@miq/utils\";\n\nconst propTypes = {\n    value: PropTypes.string,\n    // children\n\n    id: PropTypes.string,\n    className: PropTypes.string,\n};\n\nexport default function Label({ value, children, ...props }) {\n    const shared = {\n        className: getClassName([\"miq-label\", props.className]),\n    };\n\n    if (children) {\n        return (\n            <div {...props} {...shared}>\n                {children}\n            </div>\n        );\n    }\n\n    if (!value) {\n        return null;\n    }\n\n    return (\n        <label htmlFor={props.id} {...shared}>\n            {value}\n        </label>\n    );\n}\n\nLabel.propTypes = propTypes;\n","import { forwardRef, useContext } from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport { getClassName, isRequired, IS_DEV } from \"@miq/utils\";\nimport FormCtx from \"./FormCtx\";\nimport Label from \"./Label\";\n\nconst CheckboxInput = forwardRef(({ label, ...props }, ref) => {\n    const ctx = useContext(FormCtx) || isRequired(\"FormCtx\");\n    const { name = isRequired(\"name prop\") } = props;\n    let { checked, onChange } = props;\n\n    if (Object.keys(ctx.values).includes(name)) {\n        // props[\"checked\"] = ;\n    }\n\n    onChange = onChange || ctx.toggleCheck;\n\n    return (\n        <div className=\"miq-checkbox\">\n            <input {...props} type=\"checkbox\" {...{ onChange }} checked={checked || ctx.values[name]} ref={ref} />\n\n            <Label value={label} className=\"miq-checkbox-label\" />\n        </div>\n    );\n});\n\nCheckboxInput.propTypes = {\n    id: PropTypes.string,\n    className: PropTypes.string,\n    value: PropTypes.any,\n    checked: PropTypes.bool,\n    required: PropTypes.bool,\n    disabled: PropTypes.bool,\n};\n\nexport default CheckboxInput;\n\nif (IS_DEV) {\n    CheckboxInput.displayName = \"CheckboxInput\";\n}\n","import { useState } from \"react\";\n\nexport default function useForm(defaultValues = {}) {\n    const [values, setValues] = useState({ ...defaultValues });\n    const [errors, setErrors] = useState({});\n\n    const setValue = (key, value) => {\n        setValues({ ...values, [key]: value });\n    };\n\n    const toggleCheck = (e) => {\n        const { name } = e.target;\n        return setValue(name, !values[name]);\n    };\n\n    const handleChange = (e) => {\n        switch (e.target.type) {\n            case \"checkbox\":\n                return toggleCheck(e);\n\n            default:\n                return setValue(e.target.name, e.target.value);\n        }\n    };\n    return { values, handleChange, toggleCheck, setValue, setValues, errors, setErrors };\n}\n","import { forwardRef } from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport \"./form.scss\";\nimport { TextArea, TextAreaX, TextInput } from \"./TextInput\";\nimport Label from \"./Label\";\n\nimport { FormProvider } from \"./FormCtx\";\nimport CheckboxInput from \"./CheckboxInput\";\n\nconst propTypes = {\n    id: PropTypes.string,\n    className: PropTypes.string,\n\n    children: PropTypes.node,\n    context: PropTypes.object.isRequired,\n    onSubmit: PropTypes.func,\n};\n\nconst Form = forwardRef(({ children, context, ...props }, ref) => {\n    return (\n        <FormProvider value={context}>\n            <form {...props} ref={ref}>\n                {children}\n            </form>\n        </FormProvider>\n    );\n});\n\nForm.Label = Label;\nForm.TextInput = TextInput;\nForm.CheckboxInput = CheckboxInput;\nForm.TextArea = TextArea;\nForm.TextAreaX = TextAreaX;\n\nForm.propTypes = propTypes;\n\nexport default Form;\nexport { default as useForm } from \"./useForm\";\nexport { default as FormCtx, FormProvider } from \"./FormCtx\";\n"],"sourceRoot":""}