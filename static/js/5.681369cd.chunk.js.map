{"version":3,"sources":["../../../../../packages/miq-dms/src/DocumentUpdateView/DocumentShareModal/SelectUserModal.jsx","../../../../../packages/miq-dms/src/DocumentUpdateView/DocumentShareModal/AddUserModal.jsx","../../../../../packages/miq-dms/src/DocumentUpdateView/DocumentShareModal/index.jsx","../../../../../packages/miq-dms/src/components.jsx","../../../../../packages/miq-dms/src/DocumentUpdateView/DocumentUpdateForm.jsx","../../../../../packages/miq-dms/src/DocumentUpdateView/index.jsx","../../../../../packages/miq-dms/src/utils.jsx","../../../../../packages/miq-shared/src/form/FormCtx.jsx","../../../../../packages/miq-shared/src/form/TextInput.jsx","../../../../../packages/miq-shared/src/form/Label.jsx","../../../../../packages/miq-shared/src/form/CheckboxInput.jsx","../../../../../packages/miq-shared/src/form/useForm.jsx","../../../../../packages/miq-shared/src/form/index.jsx"],"names":["Header","props","className","PersonPlus","Icon","Icons","X","Footer","form","primary","onClick","closeModal","SelectUserModal","doc","useState","q","setQ","users","setUsers","debounceGetStaffUsers","useCallback","debounce","docServices","getStaffList","then","results","useEffect","length","context","id","Modal","header","footer","floating","required","name","onChange","e","target","value","placeholder","isOpen","map","user","i","includes","slug","setValue","setUser","role","users_data","permission","addUser","AddUserModal","values","ArrowLeft","title","uploaded_by","patchUser","action","data","console","log","setDoc","catch","err","CheckboxInput","checked","sendNotif","label","TextArea","maxLength","rows","DocumentShareModal","useForm","message","setOpen","UserCard","username","FileUploadButton","onSuccess","uploadRef","createRef","PaperClipIcon","click","FileInput","evt","files","Array","from","forEach","file","postFile","ref","accept","join","forwardRef","ReactDOM","createPortal","type","style","display","document","body","xmlns","width","height","fill","viewBox","d","DocumentUpdateForm","docSlug","isRequired","isReadOnly","status","handleTextInputSave","patch","fileData","patchFile","disabled","Label","TextInput","onSave","autoComplete","TextAreaX","headers","files_data","getFileIcon","ext","name_truncated","created","size","ViewHeader","to","match","path","replace","tabIndex","aria-label","data-tooltip","Share","DocumentUpdateView","params","error","setError","reference","description","setValues","get","response","list","getService","API","this","oldValues","services","delete","Promise","reject","fd","FormData","append","post","Object","keys","FormCtx","createContext","FormProvider","Provider","withInput","Component","args","ctx","useContext","rest","debounceOnSave","useRef","isFunction","getClassName","func","handleChange","current","propTypes","PropTypes","string","bool","TextareaX","IS_DEV","displayName","children","shared","htmlFor","toggleCheck","defaultValues","errors","setErrors","key","Form"],"mappings":"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","file":"static/js/5.681369cd.chunk.js","sourcesContent":["import { debounce, throttle } from \"lodash\";\nimport { useCallback, useEffect, useRef, useState } from \"react\";\n\nimport Form from \"@miq/form\";\nimport { Portal, Button, IconButton, Icons, Collapse } from \"@miq/components\";\nimport { docServices } from \"../../utils\";\nimport { UserCard } from \".\";\n\nexport const Header = (props) => {\n    return (\n        <div className=\"dms-share-header\">\n            <div className=\"title\">\n                <div className=\"icon-wrapper\">\n                    <Icons.PersonPlus />\n                </div>\n                <h2>Partager avec des personnes</h2>\n            </div>\n\n            <div className=\"actions\">\n                <IconButton Icon={Icons.X} />\n            </div>\n        </div>\n    );\n};\n\n/**\n *\n * @param {*} props\n * @returns\n */\n\nexport const Footer = (props) => {\n    const { form } = props;\n    return (\n        <div className=\"dms-share-footer\">\n            <div className=\"\">\n                <Button primary onClick={props.closeModal}>\n                    Terminé\n                </Button>\n            </div>\n        </div>\n    );\n};\n\nexport default function SelectUserModal({ form, doc, ...props }) {\n    const [q, setQ] = useState(\"\");\n    const [users, setUsers] = useState([]);\n\n    const getStaffUsers = (q) =>\n        docServices.getStaffList(q).then(({ results }) => {\n            // if (results)\n            setUsers(results);\n        });\n    const debounceGetStaffUsers = useCallback(debounce(getStaffUsers, 400), []);\n\n    useEffect(() => {\n        if (!q || q.length < 3) return;\n\n        debounceGetStaffUsers(q);\n    }, [q, debounceGetStaffUsers]);\n\n    if (!form || !doc) return null;\n\n    const setUser = (user) => {\n        if (doc.users.includes(user.slug)) return;\n        form.setValue(\"user\", user);\n    };\n\n    return (\n        <Portal>\n            <Form context={form} id=\"DocumentShareModal\" className=\"dms-share\">\n                <Portal.Modal header={<Header {...props} {...{ form }} />} footer={<Footer {...props} {...{ form }} />}>\n                    <div className=\"dms-share-select\">\n                        {/* <SelectUserTab {...props} {...{ form }} /> */}\n\n                        <Collapse\n                            floating\n                            header={\n                                <input\n                                    required\n                                    name=\"q\"\n                                    onChange={(e) => setQ(e.target.value)}\n                                    placeholder=\"Ajouter des personnes\"\n                                    className=\"miq-input mb-1\"\n                                />\n                            }\n                            isOpen={q.length > 2 && users.length > 0}\n                        >\n                            {users.map((user, i) => (\n                                <div\n                                    className=\"dms-user-item\"\n                                    onClick={() => setUser(user)}\n                                    key={`${user.slug}-${i}`}\n                                    role=\"button\"\n                                >\n                                    <UserCard {...{ user, form }} />\n                                </div>\n                            ))}\n                        </Collapse>\n\n                        <div className=\"dms-share-users my-2\">\n                            {doc.users_data.map((user) => {\n                                return (\n                                    <div className=\"my-1\" key={user.slug}>\n                                        <UserCard {...{ user, form }} />\n                                        {user.permission}\n                                    </div>\n                                );\n                            })}\n                        </div>\n                    </div>\n                </Portal.Modal>\n            </Form>\n        </Portal>\n    );\n}\n\n/**\n *\n * @param {*} param0\n * @returns\n */\n\nexport function SelectUserTab({ doc, form = {}, ...props }) {\n    const q = form.values.q;\n    const [users, setUsers] = useState([]);\n    const [width, setWidth] = useState(null);\n\n    const getStaffUsers = (q) =>\n        docServices.getStaffList(q).then(({ results }) => {\n            if (results) setUsers(results);\n            console.log(\"her\");\n        });\n    const debounceGetStaffUsers = useCallback(debounce(getStaffUsers, 400), []);\n\n    useEffect(() => {\n        if (!q || q.length < 3) return;\n        debounceGetStaffUsers(q);\n    }, [q, debounceGetStaffUsers]);\n\n    const ref = useRef(null);\n\n    useEffect(() => {\n        const el = ref.current;\n        if (!el || typeof window !== \"object\") return;\n\n        const resize = throttle(\n            () => {\n                const rect = el.getBoundingClientRect();\n                setWidth(rect.width);\n            },\n            400,\n            { trailing: true }\n        );\n\n        window.addEventListener(\"resize\", resize);\n        resize();\n\n        return () => window.removeEventListener(\"resize\", resize);\n    }, []);\n\n    const setUser = (user) => {\n        if (!form || doc.users.includes(user.slug)) return;\n        form.setValue(\"user\", user);\n    };\n\n    return (\n        <div className=\"dms-dropdown\">\n            <div className=\"dms-dropdown-header\">\n                <Form.TextInput required name=\"q\" placeholder=\"Ajouter des personnes\" className=\"mb-1\" ref={ref} />\n            </div>\n\n            {users && users.length !== 0 && (\n                <div className=\"dms-dropdown-body\" style={{ width }}>\n                    <ul className=\"inner\">\n                        {users.map((user, i) => {\n                            return (\n                                <li\n                                    className=\"dms-dropdown-item\"\n                                    onClick={() => setUser(user)}\n                                    key={`${user.slug}-${i}`}\n                                    role=\"button\"\n                                >\n                                    <UserCard {...{ user, form }} />\n                                </li>\n                            );\n                        })}\n                    </ul>\n                </div>\n            )}\n        </div>\n    );\n}\n","import Form from \"@miq/form\";\nimport { Portal, Icons, Button, IconButton } from \"@miq/components\";\nimport { UserCard } from \".\";\nimport { docServices } from \"../../utils\";\n\n/**\n *\n * @param {*} props\n * @returns\n */\n\nexport const Footer = (props) => {\n    const { form, addUser } = props;\n    return (\n        <div className=\"dms-share-footer\">\n            <div className=\"\">\n                <Button onClick={addUser}>Envoyer</Button>\n            </div>\n        </div>\n    );\n};\n\nexport default function AddUserModal({ form, doc, ...props }) {\n    const user = form.values.user;\n\n    if (!form) return null;\n\n    const addUser = () => {\n        const { slug } = form.values.user;\n        if (slug === doc.uploaded_by.slug) {\n            return;\n        }\n\n        docServices\n            .patchUser(doc.slug, { action: \"add\", users: [slug] })\n            .then((data) => {\n                console.log(data);\n                props.setDoc({ ...doc, ...data });\n                form.setValue(\"user\", null);\n            })\n            .catch((err) => {\n                console.log(err);\n            });\n    };\n\n    return (\n        <Portal>\n            <Form context={form} id=\"DocumentShareModal\" className=\"dms-share\">\n                <Portal.Modal\n                    /**\n                     * HEADER\n                     */\n                    header={\n                        <div className=\"dms-share-header\">\n                            <div className=\"title\">\n                                <div className=\"icon\">\n                                    <IconButton\n                                        Icon={Icons.ArrowLeft}\n                                        onClick={() => form.setValue(\"user\", \"\")}\n                                        title=\"Retourner derriere\"\n                                    />\n                                </div>\n                                <h2>Partager avec des personnes</h2>\n                            </div>\n\n                            <div className=\"actions\"></div>\n                        </div>\n                    }\n                    /**\n                     * FOOTER\n                     */\n                    footer={<Footer {...props} {...{ addUser }} />}\n                >\n                    <div className=\"dms-share-add\">\n                        <div className=\"\">\n                            <UserCard {...{ user }} />\n                        </div>\n\n                        <div className=\"add-form mt-2\">\n                            <Form.CheckboxInput\n                                name=\"sendNotif\"\n                                checked={form.values.sendNotif}\n                                label=\"Envoyer une notification\"\n                            />\n\n                            <Form.TextArea\n                                name=\"message\"\n                                placeholder=\"Message\"\n                                maxLength={200}\n                                rows={4}\n                                className=\"my-1\"\n                            />\n                        </div>\n                    </div>\n                </Portal.Modal>\n            </Form>\n        </Portal>\n    );\n}\n","import { useForm } from \"@miq/form\";\nimport { Img } from \"@miq/components\";\nimport SelectUserModal from \"./SelectUserModal\";\nimport AddUserModal from \"./AddUserModal\";\n\nimport \"./document-share-modal.scss\";\n\n/**\n *\n * @param {*} props\n * @returns\n */\n\nexport default function DocumentShareModal(props) {\n    // const form = useForm({ q: \"\", user: null });\n    const form = useForm({\n        q: \"\",\n        // user: { username: \"getonerd\", name: \"Michael Giovann\" },\n        user: null,\n        sendNotif: true,\n        message: \"\",\n    });\n\n    const { isOpen } = props;\n\n    if (!isOpen) return null;\n\n    const closeModal = () => props.setOpen(false);\n\n    if (form.values.user) return <AddUserModal {...props} {...{ form, closeModal }} />;\n\n    return <SelectUserModal {...props} {...{ form, closeModal }} />;\n}\n\nexport const UserCard = ({ user, form, ...props }) => {\n    return (\n        <div className=\"d-flex align-items-center\">\n            <div className=\"\">\n                <Img />\n            </div>\n            <div className=\"ms-1\">\n                <div className=\"\">{user.name}</div>\n                <div className=\"\">@{user.username}</div>\n            </div>\n        </div>\n    );\n};\n","import ReactDOM from \"react-dom\";\nimport PropTypes from \"prop-types\";\nimport { IconButton, Portal, Icons } from \"@miq/components\";\nimport { docServices } from \"./utils\";\nimport Form, { useForm } from \"@miq/form\";\nimport { createRef, forwardRef, useEffect, useState } from \"react\";\n\nexport const ShareModal = (props) => {\n    const { doc } = props;\n\n    const addUser = (e) => {};\n\n    const validResults = users.filter((user) => !doc.users.includes(user.slug));\n\n    return (\n        <Portal>\n            <Portal.Modal\n                onClose={props.onClose}\n                header={<div className=\"\"></div>}\n                footer={\n                    <div className=\"\">\n                        <button onClick={props.onClose}>Cancel</button>\n                        <button>Partager</button>\n                    </div>\n                }\n            >\n                <div className=\"\">\n                    <div className=\"mb-2\">\n                        {form.values.users.map((user) => {\n                            return <div className=\"\">{user.name}</div>;\n                        })}\n                    </div>\n\n                    <Form context={form}>\n                        <div className=\"\">\n                            {validResults &&\n                                validResults.map((user) => (\n                                    <div className=\"d-flex align-items-center justify-content-between\">\n                                        <div className=\"\">\n                                            <h5>{user.name}</h5>\n                                            <div className=\"\">@{user.username}</div>\n                                        </div>\n\n                                        <div>\n                                            <button\n                                                type=\"button\"\n                                                onClick={() => {\n                                                    form.setValues({\n                                                        ...form.values,\n                                                        users: [...form.values.users, user],\n                                                        q: \"\",\n                                                    });\n                                                    setUsers([]);\n                                                }}\n                                            >\n                                                Ajouter\n                                            </button>\n                                        </div>\n                                    </div>\n                                ))}\n                        </div>\n                    </Form>\n                </div>\n            </Portal.Modal>\n        </Portal>\n    );\n};\n\nexport const FileUploadButton = ({ onSuccess, ...props }) => {\n    let uploadRef = createRef();\n\n    function uploadFiles(evt) {\n        // TODO: Ensure this filename has at most 100 characters\n\n        console.log(evt.target.files);\n\n        Array.from(evt.target.files).forEach((file) => {\n            docServices\n                .postFile(file)\n                .then((data) => {\n                    if (onSuccess) onSuccess(data);\n                })\n                .catch((err) => {\n                    console.log(err);\n                });\n        });\n    }\n\n    return (\n        <>\n            <IconButton Icon={PaperClipIcon} label=\"Joindre\" {...props} onClick={() => uploadRef.click()} />\n            <FileInput onChange={uploadFiles} ref={(file) => (uploadRef = file)} />\n        </>\n    );\n};\n\nconst accept = [\n    `image/*`,\n    `.pdf`,\n    `.md`,\n    `.doc`,\n    `.docx`,\n    `application/msword`,\n    `application/vnd.openxmlformats-officedocument.wordprocessingml.document`,\n].join(\",\");\n\nconst FileInput = forwardRef((props, ref) => {\n    return ReactDOM.createPortal(\n        <input\n            name=\"files\"\n            accept={accept}\n            {...props}\n            type=\"file\"\n            style={{ ...props.style, display: \"none\" }}\n            ref={ref}\n        />,\n        document.body\n    );\n});\n\nFileInput.propTypes = {\n    name: PropTypes.string,\n    onChange: PropTypes.func,\n    accept: PropTypes.string,\n    style: PropTypes.object,\n    multiple: PropTypes.bool,\n};\n\nconst PaperClipIcon = (props) => (\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\" viewBox=\"0 0 16 16\" {...props}>\n        <path d=\"M4.5 3a2.5 2.5 0 0 1 5 0v9a1.5 1.5 0 0 1-3 0V5a.5.5 0 0 1 1 0v7a.5.5 0 0 0 1 0V3a1.5 1.5 0 1 0-3 0v9a2.5 2.5 0 0 0 5 0V5a.5.5 0 0 1 1 0v7a3.5 3.5 0 1 1-7 0V3z\" />\n    </svg>\n);\n","import Form from \"@miq/form\";\nimport { AdminView } from \"@miq/admin\";\nimport { isRequired } from \"@miq/utils\";\nimport { Table, Icons } from \"@miq/components\";\nimport { docServices } from \"../utils\";\nimport { FileUploadButton } from \"../components\";\nimport { ViewHeader } from \"./index\";\n\nexport default function DocumentUpdateForm({ docSlug, ...props }) {\n    const { form = isRequired(\"form\"), doc, setDoc } = props;\n\n    const addFile = (fileData) => {\n        const { slug } = fileData;\n        docServices\n            .patchFile(docSlug, { action: \"add\", files: [slug] })\n            .then((data) => {\n                console.log(data);\n            })\n            .catch((err) => {});\n    };\n\n    const isReadOnly = doc.status === \"ARCHIVED\";\n    const handleTextInputSave = ({ name, value }) => {\n        docServices\n            .patch(docSlug, { [name]: value }, { [name]: doc[name] })\n            .then((data) => {\n                console.log(data);\n            })\n            .catch((err) => {});\n    };\n\n    return (\n        <Form context={form} className=\"document-update-form\">\n            <AdminView className=\"document-update-view\">\n                <ViewHeader {...props} {...{ doc, setDoc, handleTextInputSave, isReadOnly }} />\n\n                <div className=\"\">\n                    Supprimer | Archiver | Commenter | <FileUploadButton onSuccess={addFile} disabled={isReadOnly} />\n                </div>\n\n                <div className=\"field\">\n                    <Form.Label value=\"Reference\" />\n                    <Form.TextInput\n                        name=\"reference\"\n                        onSave={handleTextInputSave}\n                        autoComplete=\"off\"\n                        placeholder=\"Ajouter une reference ...\"\n                        disabled={isReadOnly}\n                    />\n                </div>\n\n                <div className=\"field\">\n                    <Form.Label value=\"Description\" />\n                    <Form.TextAreaX\n                        name=\"description\"\n                        onSave={handleTextInputSave}\n                        placeholder=\"Ajouter une description ...\"\n                        disabled={isReadOnly}\n                    />\n                </div>\n\n                <div>\n                    <div className=\"d-flex align-items-center justify-content-between\">\n                        <h4>Fichiers</h4>\n                    </div>\n\n                    <Table headers={[\"\", \"Title\", \"Ajouté par\", \"Date\", \"Taille\"]}>\n                        {doc.files_data &&\n                            doc.files_data.map((file) => {\n                                const Icon = Icons.getFileIcon(file.ext);\n                                return (\n                                    <tr key={file.slug}>\n                                        <td>\n                                            <Icon ext={file.ext} />\n                                        </td>\n                                        <td>{file.name_truncated}</td>\n\n                                        <td>{file.user.name}</td>\n                                        <td>{file.created}</td>\n                                        <td>{file.size}</td>\n                                    </tr>\n                                );\n                            })}\n                    </Table>\n                </div>\n            </AdminView>\n        </Form>\n    );\n}\n","import Form, { useForm } from \"@miq/form\";\nimport { Icons, IconButton, IconNavLink } from \"@miq/components\";\nimport { useEffect, useState } from \"react\";\nimport { docServices } from \"../utils\";\n\nimport \"./document-update-view.scss\";\n\nimport DocumentShareModal from \"./DocumentShareModal/\";\nimport DocumentUpdateForm from \"./DocumentUpdateForm\";\n\nexport const ViewHeader = (props) => {\n    const { isReadOnly } = props;\n    const [isOpen, setOpen] = useState(false);\n\n    return (\n        <div className=\"document-update-header my-2\">\n            <div className=\"pe-2\">\n                <IconNavLink\n                    to={props.match.path.replace(\":docSlug/\", \"\")}\n                    Icon={Icons.ArrowLeft}\n                    title=\"Retourner en arriere\"\n                />\n            </div>\n            <div className=\"flex-1\">\n                <Form.TextInput\n                    required\n                    name=\"title\"\n                    onSave={props.handleTextInputSave}\n                    disabled={isReadOnly}\n                    autoComplete=\"off\"\n                    tabIndex={0}\n                    aria-label=\"Renommer ce document\"\n                    title=\"Renommer ce document\"\n                    data-tooltip=\"Renommer ce document\"\n                />\n            </div>\n\n            <div className=\"ps-2\">\n                <IconButton\n                    primary\n                    disabled={isReadOnly}\n                    Icon={Icons.Share}\n                    label=\"Partager\"\n                    title=\"Partager ce document avec des personnes\"\n                    onClick={() => setOpen(true)}\n                />\n\n                {!isReadOnly && isOpen && <DocumentShareModal {...props} {...{ setOpen, isOpen }} />}\n            </div>\n        </div>\n    );\n};\n\n/**\n *\n * @param {*} props\n * @returns\n */\n\nexport default function DocumentUpdateView(props) {\n    const { docSlug } = props.match.params;\n\n    const [doc, setDoc] = useState(null);\n    const [error, setError] = useState(null);\n\n    const form = useForm({ title: \"\", reference: \"\", description: \"\" });\n    const { setValues } = form;\n\n    useEffect(() => {\n        docServices\n            .get(docSlug)\n            .then((data) => {\n                setDoc(data);\n                setValues({\n                    title: data.title || \"\",\n                    reference: data.reference || \"\",\n                    description: data.description || \"\",\n                });\n            })\n            .catch((err) => {\n                if (err.response) {\n                    if (err.response.status === 404) {\n                        setError(\"notfound\");\n                        return;\n                    }\n                }\n\n                setError(\"error\");\n            });\n    }, [docSlug, setValues]);\n\n    if (error)\n        return (\n            <div>\n                <h1>Ce document n'existe pas</h1>\n            </div>\n        );\n\n    if (!doc || !doc.slug) return null;\n\n    return <DocumentUpdateForm {...props} {...{ docSlug, doc, setDoc, docSlug, form }} />;\n}\n","import { API, services } from \"@miq/admin\";\nimport { getService } from \"@miq/utils\";\n\nexport const docServices = {\n    path: \"documents/\",\n\n    list(params) {\n        return getService(API, this.path, params);\n    },\n    get(docSlug, params) {\n        return getService(API, `${this.path}${docSlug}/`, params);\n    },\n    patch(docSlug, values, oldValues) {\n        return services.patch(`${this.path}${docSlug}/`, values, oldValues);\n    },\n    delete(docSlug) {\n        return services.delete(`${this.path}${docSlug}/`);\n    },\n    postFile(file = isRequired(\"file\")) {\n        let name = file.name;\n        if (name.length >= 100) {\n            return Promise.reject(\"File name is too long\");\n        }\n\n        const fd = new FormData();\n        fd.append(\"src\", file, name);\n\n        return services.post(`docufiles/`, fd, {\n            headers: { \"content-type\": \"multipart/form-data\" },\n        });\n    },\n    getStaffList(q) {\n        return services.get(\"search-staff/\", { q });\n    },\n    patchUser(docSlug, values) {\n        if (!Object.keys(values).includes(\"action\")) {\n            return Promise.reject(\"Action required\");\n        }\n\n        return services.post(`${this.path}${docSlug}/users/`, values);\n    },\n    patchFile(docSlug, values) {\n        if (!Object.keys(values).includes(\"action\")) {\n            return Promise.reject(\"Action required\");\n        }\n\n        return services.post(`${this.path}${docSlug}/files/`, values);\n    },\n};\n","import { createContext } from \"react\";\n\nconst FormCtx = createContext(null);\n\nexport const FormProvider = FormCtx.Provider;\n\nexport default FormCtx;\n","import React, { forwardRef, useContext, useRef } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { debounce, isFunction } from \"lodash\";\n\nimport TextareaX from \"../components/inputs/TextareaX\";\nimport { getClassName, isRequired, IS_DEV } from \"@miq/utils\";\nimport FormCtx from \"./FormCtx\";\n\nconst withInput = (Component, args = {}) => {\n    return forwardRef((props, ref) => {\n        props = { ...args, ...props };\n        const ctx = useContext(FormCtx) || isRequired(\"FormCtx\");\n        const { name = isRequired(\"name prop\") } = props;\n        let { value, checked } = props;\n\n        if (Object.keys(ctx.values).includes(name)) {\n            if (props.type === \"checkbox\") checked = ctx.values[name];\n            else value = ctx.values[name];\n        }\n\n        const { onSave, ...rest } = props;\n        const debounceOnSave = useRef(\n            debounce((e) => {\n                if (props.required && !e.target.value) return;\n                if (!onSave || !isFunction(onSave)) return;\n                return onSave({ name: e.target.name, value: e.target.value, e });\n            }, 500)\n        );\n\n        const onChange = (e) => {\n            const func = props.onChange || ctx.handleChange;\n            if (!func) return;\n\n            func(e);\n            if (!debounceOnSave.current) return;\n            debounceOnSave.current(e);\n        };\n\n        return (\n            <Component\n                {...rest}\n                className={getClassName([args.className, props.className])}\n                {...{ value, checked, onChange }}\n                ref={ref}\n            />\n        );\n    });\n};\n\nexport const TextInput = withInput(\"input\", { className: \"miq-input\" });\nTextInput.propTypes = {\n    type: PropTypes.string,\n    id: PropTypes.string,\n    className: PropTypes.string,\n    value: PropTypes.string,\n    required: PropTypes.bool,\n    disabled: PropTypes.bool,\n};\n\nexport const TextArea = withInput(\"textarea\", { className: \"miq-textarea\" });\nexport const TextAreaX = withInput(TextareaX);\n\nif (IS_DEV) {\n    TextInput.displayName = \"TextInput\";\n    TextArea.displayName = \"TextArea\";\n    TextAreaX.displayName = \"TextAreaX\";\n}\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport { getClassName } from \"@miq/utils\";\n\nconst propTypes = {\n    value: PropTypes.string,\n    // children\n\n    id: PropTypes.string,\n    className: PropTypes.string,\n};\n\nexport default function Label({ value, children, ...props }) {\n    const shared = {\n        className: getClassName([\"miq-label\", props.className]),\n    };\n\n    if (children) {\n        return (\n            <div {...props} {...shared}>\n                {children}\n            </div>\n        );\n    }\n\n    if (!value) {\n        return null;\n    }\n\n    return (\n        <label htmlFor={props.id} {...shared}>\n            {value}\n        </label>\n    );\n}\n\nLabel.propTypes = propTypes;\n","import { forwardRef, useContext } from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport { getClassName, isRequired, IS_DEV } from \"@miq/utils\";\nimport FormCtx from \"./FormCtx\";\nimport Label from \"./Label\";\n\nconst CheckboxInput = forwardRef(({ label, ...props }, ref) => {\n    const ctx = useContext(FormCtx) || isRequired(\"FormCtx\");\n    const { name = isRequired(\"name prop\") } = props;\n    let { checked, onChange } = props;\n\n    if (Object.keys(ctx.values).includes(name)) {\n        // props[\"checked\"] = ;\n    }\n\n    onChange = onChange || ctx.toggleCheck;\n\n    return (\n        <div className=\"miq-checkbox\">\n            <input {...props} type=\"checkbox\" {...{ onChange }} checked={checked || ctx.values[name]} ref={ref} />\n\n            <Label value={label} className=\"miq-checkbox-label\" />\n        </div>\n    );\n});\n\nCheckboxInput.propTypes = {\n    id: PropTypes.string,\n    className: PropTypes.string,\n    value: PropTypes.any,\n    checked: PropTypes.bool,\n    required: PropTypes.bool,\n    disabled: PropTypes.bool,\n};\n\nexport default CheckboxInput;\n\nif (IS_DEV) {\n    CheckboxInput.displayName = \"CheckboxInput\";\n}\n","import { useState } from \"react\";\n\nexport default function useForm(defaultValues = {}) {\n    const [values, setValues] = useState({ ...defaultValues });\n    const [errors, setErrors] = useState({});\n\n    const setValue = (key, value) => {\n        setValues({ ...values, [key]: value });\n    };\n\n    const toggleCheck = (e) => {\n        const { name } = e.target;\n        return setValue(name, !values[name]);\n    };\n\n    const handleChange = (e) => {\n        switch (e.target.type) {\n            case \"checkbox\":\n                return toggleCheck(e);\n\n            default:\n                return setValue(e.target.name, e.target.value);\n        }\n    };\n    return { values, handleChange, toggleCheck, setValue, setValues, errors, setErrors };\n}\n","import { forwardRef } from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport \"./form.scss\";\nimport { TextArea, TextAreaX, TextInput } from \"./TextInput\";\nimport Label from \"./Label\";\n\nimport { FormProvider } from \"./FormCtx\";\nimport CheckboxInput from \"./CheckboxInput\";\n\nconst propTypes = {\n    id: PropTypes.string,\n    className: PropTypes.string,\n\n    children: PropTypes.node,\n    context: PropTypes.object.isRequired,\n    onSubmit: PropTypes.func,\n};\n\nconst Form = forwardRef(({ children, context, ...props }, ref) => {\n    return (\n        <FormProvider value={context}>\n            <form {...props} ref={ref}>\n                {children}\n            </form>\n        </FormProvider>\n    );\n});\n\nForm.Label = Label;\nForm.TextInput = TextInput;\nForm.CheckboxInput = CheckboxInput;\nForm.TextArea = TextArea;\nForm.TextAreaX = TextAreaX;\n\nForm.propTypes = propTypes;\n\nexport default Form;\nexport { default as useForm } from \"./useForm\";\nexport { default as FormCtx, FormProvider } from \"./FormCtx\";\n"],"sourceRoot":""}