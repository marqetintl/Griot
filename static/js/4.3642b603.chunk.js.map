{"version":3,"sources":["../../../grio-adminjs/src/documents/viewers/PdfViewer.jsx","../../../grio-adminjs/src/documents/index.jsx"],"names":["PdfViewer","props","url","src","console","log","pdfjs","GlobalWorkerOptions","workerSrc","version","useState","numPages","setNumPages","pageNumber","setPageNumber","changePage","offset","prevPageNumber","file","onLoadSuccess","type","disabled","onClick","className","ViewTable","items","map","item","to","slug","style","marginBottom","title","name","formatDate","created","month","day","year","DocumentRoutes","path","match","component","DocumentUpdateView","DocumentListView","docSlug","params","useEffect","docActions","get","docs","useSelector","state","doc","results","find","i","Actions","label","Icon","PlusCircle","onAddClick","list","next","uploadRef","createRef","input","ReactDOM","createPortal","ref","onChange","evt","target","files","Array","from","forEach","post","then","data","catch","err","display","accept","document","body","id","getClassName","List","actions","click"],"mappings":"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","file":"static/js/4.3642b603.chunk.js","sourcesContent":["import { useCallback, useEffect, useRef, useState } from \"react\";\nimport { Document, Page, pdfjs } from \"react-pdf\";\n\n// const url = \"http://www.pdf995.com/samples/pdf.pdf\";\n\nconst path = \"https://cors-anywhere.herokuapp.com/http://www.pdf995.com/samples/pdf.pdf\";\n\nexport default function PdfViewer(props) {\n    let url = props.src;\n    if (!url) return null;\n\n    console.log(url);\n\n    // url = `https://cors-anywhere.herokuapp.com/${url}`;\n\n    pdfjs.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjs.version}/pdf.worker.js`;\n    const [numPages, setNumPages] = useState(null);\n    const [pageNumber, setPageNumber] = useState(1);\n\n    function onDocumentLoadSuccess({ numPages }) {\n        setNumPages(numPages);\n        setPageNumber(pageNumber);\n    }\n    function changePage(offset) {\n        setPageNumber((prevPageNumber) => prevPageNumber + offset);\n    }\n\n    function previousPage() {\n        changePage(-1);\n    }\n\n    function nextPage() {\n        changePage(1);\n    }\n\n    return (\n        <div>\n            <Document file={url} onLoadSuccess={onDocumentLoadSuccess}>\n                <Page pageNumber={pageNumber} />\n            </Document>\n\n            <div>\n                <button type=\"button\" disabled={pageNumber <= 1} onClick={previousPage} className=\"Pre\">\n                    Previous\n                </button>\n\n                <button type=\"button\" disabled={pageNumber >= numPages} onClick={nextPage}>\n                    Next\n                </button>\n            </div>\n        </div>\n    );\n}\n\n// {numPages &&\n// Array(numPages)\n//     .fill()\n//     .map((_, i) => <Page pageNumber={i + 1} />)}\n","import { Link, Route, Switch } from \"react-router-dom\";\nimport ReactDOM from \"react-dom\";\nimport { useSelector } from \"react-redux\";\nimport { PlusCircle } from \"react-bootstrap-icons\";\n\nimport { Views } from \"@miq/admin\";\nimport { IconButton } from \"@miq/components\";\nimport { formatDate, getClassName } from \"@miq/utils\";\nimport { createRef, useEffect } from \"react\";\nimport { docActions } from \"./utils\";\nimport PdfViewer from \"./viewers/PdfViewer\";\n\nconst ViewTable = ({ items = [], ...props }) => {\n    return (\n        <div className=\"\">\n            {items.map((item) => {\n                return (\n                    <Link to={`${item.slug}/`} key={item.slug}>\n                        <div style={{ marginBottom: \".5rem\" }}>\n                            <div>{item.title || item.name}</div>\n                            <div>\n                                {formatDate(item.created, { month: \"long\", day: \"numeric\", year: \"numeric\" }, \"fr\")}\n                            </div>\n                        </div>\n                    </Link>\n                );\n            })}\n        </div>\n    );\n};\n\nexport default function DocumentRoutes(props) {\n    const { path } = props.match;\n    return (\n        <Switch>\n            <Route path={`${path}:docSlug/`} component={DocumentUpdateView} />\n            <Route path={`${path}`} component={DocumentListView} />\n        </Switch>\n    );\n}\n\nconst DocumentUpdateView = (props) => {\n    const { docSlug } = props.match.params;\n\n    useEffect(() => {\n        docActions.get(docSlug);\n    }, [docSlug]);\n\n    const docs = useSelector((state) => state.docs);\n    if (!docs) return null;\n\n    const doc = docs.results.find((i) => i.slug === docSlug);\n    if (!doc) return null;\n\n    return (\n        <div>\n            <PdfViewer src={doc.src} />\n        </div>\n    );\n};\n\nconst Actions = (props) => {\n    return (\n        <>\n            <IconButton label=\"Ajouter\" Icon={PlusCircle} onClick={props.onAddClick} />\n        </>\n    );\n};\n\nconst DocumentListView = (props) => {\n    useEffect(() => {\n        docActions.list();\n    }, []);\n\n    const { results, next } = useSelector((state) => state.docs);\n\n    let uploadRef = createRef();\n    const input = ReactDOM.createPortal(\n        <input\n            type=\"file\"\n            name=\"files\"\n            ref={(file) => (uploadRef = file)}\n            onChange={uploadFiles}\n            style={{ display: \"none\" }}\n            // multiple={multiple}\n            accept=\"image/*,.pdf,.md,.doc,.docx,application/msword,application/vnd.openxmlformats-officedocument.wordprocessingml.document\"\n        />,\n        document.body\n    );\n\n    function uploadFiles(evt) {\n        // TODO: Ensure this filename has at most 100 characters\n\n        console.log(evt.target.files);\n\n        Array.from(evt.target.files).forEach((file) => {\n            docActions\n                .post(file)\n                .then((data) => {\n                    console.log(data);\n                })\n                .catch((err) => {\n                    console.log(err);\n                });\n        });\n    }\n\n    const shared = {\n        id: props.id,\n        className: getClassName([\"ImageUploadButton\", props.className]),\n        onClick: () => uploadRef.click(),\n        role: \"button\",\n        // ref: ref,\n    };\n\n    return (\n        <Views.List title=\"Archives\" actions={<Actions {...props} {...{ onAddClick: () => uploadRef.click() }} />}>\n            <div className=\"\">\n                <ViewTable items={results} />\n            </div>\n\n            {next && <div className=\"\">next</div>}\n            {input}\n        </Views.List>\n    );\n};\n"],"sourceRoot":""}